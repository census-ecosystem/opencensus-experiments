/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.interop.CommonResponseStatus', null, global);
goog.exportSymbol('proto.interop.InteropResultRequest', null, global);
goog.exportSymbol('proto.interop.InteropResultResponse', null, global);
goog.exportSymbol('proto.interop.InteropRunRequest', null, global);
goog.exportSymbol('proto.interop.InteropRunResponse', null, global);
goog.exportSymbol('proto.interop.RegistrationRequest', null, global);
goog.exportSymbol('proto.interop.RegistrationResponse', null, global);
goog.exportSymbol('proto.interop.Service', null, global);
goog.exportSymbol('proto.interop.ServiceHop', null, global);
goog.exportSymbol('proto.interop.ServicePort', null, global);
goog.exportSymbol('proto.interop.Spec', null, global);
goog.exportSymbol('proto.interop.Spec.Propagation', null, global);
goog.exportSymbol('proto.interop.Spec.Transport', null, global);
goog.exportSymbol('proto.interop.Status', null, global);
goog.exportSymbol('proto.interop.Tag', null, global);
goog.exportSymbol('proto.interop.TestRequest', null, global);
goog.exportSymbol('proto.interop.TestResponse', null, global);
goog.exportSymbol('proto.interop.TestResult', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interop.RegistrationRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interop.RegistrationRequest.repeatedFields_, null);
};
goog.inherits(proto.interop.RegistrationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.interop.RegistrationRequest.displayName = 'proto.interop.RegistrationRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interop.RegistrationRequest.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.interop.RegistrationRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.interop.RegistrationRequest.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interop.RegistrationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.interop.RegistrationRequest.toObject = function (includeInstance, msg) {
    var f, obj = {
      serverName: jspb.Message.getFieldWithDefault(msg, 1, ''),
      servicesList: jspb.Message.toObjectList(msg.getServicesList(),
        proto.interop.Service.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interop.RegistrationRequest}
 */
proto.interop.RegistrationRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interop.RegistrationRequest();
  return proto.interop.RegistrationRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interop.RegistrationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interop.RegistrationRequest}
 */
proto.interop.RegistrationRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setServerName(value);
        break;
      case 2:
        var value = new proto.interop.Service();
        reader.readMessage(value, proto.interop.Service.deserializeBinaryFromReader);
        msg.addServices(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interop.RegistrationRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.interop.RegistrationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interop.RegistrationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interop.RegistrationRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getServerName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.interop.Service.serializeBinaryToWriter
    );
  }
};

/**
 * optional string server_name = 1;
 * @return {string}
 */
proto.interop.RegistrationRequest.prototype.getServerName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.interop.RegistrationRequest.prototype.setServerName = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated Service services = 2;
 * @return {!Array.<!proto.interop.Service>}
 */
proto.interop.RegistrationRequest.prototype.getServicesList = function () {
  return /** @type{!Array.<!proto.interop.Service>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interop.Service, 2));
};

/** @param {!Array.<!proto.interop.Service>} value */
proto.interop.RegistrationRequest.prototype.setServicesList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.interop.Service=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interop.Service}
 */
proto.interop.RegistrationRequest.prototype.addServices = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.interop.Service, opt_index);
};

proto.interop.RegistrationRequest.prototype.clearServicesList = function () {
  this.setServicesList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interop.Service = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interop.Service, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.interop.Service.displayName = 'proto.interop.Service';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.interop.Service.prototype.toObject = function (opt_includeInstance) {
    return proto.interop.Service.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interop.Service} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.interop.Service.toObject = function (includeInstance, msg) {
    var f, obj = {
      name: jspb.Message.getFieldWithDefault(msg, 1, ''),
      port: jspb.Message.getFieldWithDefault(msg, 2, 0),
      host: jspb.Message.getFieldWithDefault(msg, 3, ''),
      spec: (f = msg.getSpec()) && proto.interop.Spec.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interop.Service}
 */
proto.interop.Service.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interop.Service();
  return proto.interop.Service.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interop.Service} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interop.Service}
 */
proto.interop.Service.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPort(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setHost(value);
        break;
      case 4:
        var value = new proto.interop.Spec();
        reader.readMessage(value, proto.interop.Spec.deserializeBinaryFromReader);
        msg.setSpec(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interop.Service.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.interop.Service.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interop.Service} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interop.Service.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.interop.Spec.serializeBinaryToWriter
    );
  }
};

/**
 * optional string name = 1;
 * @return {string}
 */
proto.interop.Service.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.interop.Service.prototype.setName = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.interop.Service.prototype.getPort = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.interop.Service.prototype.setPort = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional string host = 3;
 * @return {string}
 */
proto.interop.Service.prototype.getHost = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.interop.Service.prototype.setHost = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional Spec spec = 4;
 * @return {?proto.interop.Spec}
 */
proto.interop.Service.prototype.getSpec = function () {
  return /** @type{?proto.interop.Spec} */ (
    jspb.Message.getWrapperField(this, proto.interop.Spec, 4));
};

/** @param {?proto.interop.Spec|undefined} value */
proto.interop.Service.prototype.setSpec = function (value) {
  jspb.Message.setWrapperField(this, 4, value);
};

proto.interop.Service.prototype.clearSpec = function () {
  this.setSpec(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.interop.Service.prototype.hasSpec = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interop.Spec = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interop.Spec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.interop.Spec.displayName = 'proto.interop.Spec';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.interop.Spec.prototype.toObject = function (opt_includeInstance) {
    return proto.interop.Spec.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interop.Spec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.interop.Spec.toObject = function (includeInstance, msg) {
    var f, obj = {
      transport: jspb.Message.getFieldWithDefault(msg, 1, 0),
      propagation: jspb.Message.getFieldWithDefault(msg, 2, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interop.Spec}
 */
proto.interop.Spec.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interop.Spec();
  return proto.interop.Spec.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interop.Spec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interop.Spec}
 */
proto.interop.Spec.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.interop.Spec.Transport} */ (reader.readEnum());
        msg.setTransport(value);
        break;
      case 2:
        var value = /** @type {!proto.interop.Spec.Propagation} */ (reader.readEnum());
        msg.setPropagation(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interop.Spec.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.interop.Spec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interop.Spec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interop.Spec.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTransport();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPropagation();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};

/**
 * @enum {number}
 */
proto.interop.Spec.Transport = {
  UNDEFINED_TRANSPORT: 0,
  GRPC: 1,
  HTTP: 2
};

/**
 * @enum {number}
 */
proto.interop.Spec.Propagation = {
  UNDEFINED_PROPAGATION: 0,
  BINARY_FORMAT_PROPAGATION: 1,
  B3_FORMAT_PROPAGATION: 2,
  TRACE_CONTEXT_FORMAT_PROPAGATION: 3
};

/**
 * optional Transport transport = 1;
 * @return {!proto.interop.Spec.Transport}
 */
proto.interop.Spec.prototype.getTransport = function () {
  return /** @type {!proto.interop.Spec.Transport} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.interop.Spec.Transport} value */
proto.interop.Spec.prototype.setTransport = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional Propagation propagation = 2;
 * @return {!proto.interop.Spec.Propagation}
 */
proto.interop.Spec.prototype.getPropagation = function () {
  return /** @type {!proto.interop.Spec.Propagation} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {!proto.interop.Spec.Propagation} value */
proto.interop.Spec.prototype.setPropagation = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interop.CommonResponseStatus = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interop.CommonResponseStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.interop.CommonResponseStatus.displayName = 'proto.interop.CommonResponseStatus';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.interop.CommonResponseStatus.prototype.toObject = function (opt_includeInstance) {
    return proto.interop.CommonResponseStatus.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interop.CommonResponseStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.interop.CommonResponseStatus.toObject = function (includeInstance, msg) {
    var f, obj = {
      status: jspb.Message.getFieldWithDefault(msg, 1, 0),
      error: jspb.Message.getFieldWithDefault(msg, 2, '')
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interop.CommonResponseStatus}
 */
proto.interop.CommonResponseStatus.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interop.CommonResponseStatus();
  return proto.interop.CommonResponseStatus.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interop.CommonResponseStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interop.CommonResponseStatus}
 */
proto.interop.CommonResponseStatus.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.interop.Status} */ (reader.readEnum());
        msg.setStatus(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setError(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interop.CommonResponseStatus.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.interop.CommonResponseStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interop.CommonResponseStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interop.CommonResponseStatus.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};

/**
 * optional Status status = 1;
 * @return {!proto.interop.Status}
 */
proto.interop.CommonResponseStatus.prototype.getStatus = function () {
  return /** @type {!proto.interop.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {!proto.interop.Status} value */
proto.interop.CommonResponseStatus.prototype.setStatus = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string error = 2;
 * @return {string}
 */
proto.interop.CommonResponseStatus.prototype.getError = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.interop.CommonResponseStatus.prototype.setError = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interop.RegistrationResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interop.RegistrationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.interop.RegistrationResponse.displayName = 'proto.interop.RegistrationResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.interop.RegistrationResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.interop.RegistrationResponse.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interop.RegistrationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.interop.RegistrationResponse.toObject = function (includeInstance, msg) {
    var f, obj = {
      status: (f = msg.getStatus()) && proto.interop.CommonResponseStatus.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interop.RegistrationResponse}
 */
proto.interop.RegistrationResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interop.RegistrationResponse();
  return proto.interop.RegistrationResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interop.RegistrationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interop.RegistrationResponse}
 */
proto.interop.RegistrationResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.interop.CommonResponseStatus();
        reader.readMessage(value, proto.interop.CommonResponseStatus.deserializeBinaryFromReader);
        msg.setStatus(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interop.RegistrationResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.interop.RegistrationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interop.RegistrationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interop.RegistrationResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interop.CommonResponseStatus.serializeBinaryToWriter
    );
  }
};

/**
 * optional CommonResponseStatus status = 1;
 * @return {?proto.interop.CommonResponseStatus}
 */
proto.interop.RegistrationResponse.prototype.getStatus = function () {
  return /** @type{?proto.interop.CommonResponseStatus} */ (
    jspb.Message.getWrapperField(this, proto.interop.CommonResponseStatus, 1));
};

/** @param {?proto.interop.CommonResponseStatus|undefined} value */
proto.interop.RegistrationResponse.prototype.setStatus = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.interop.RegistrationResponse.prototype.clearStatus = function () {
  this.setStatus(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.interop.RegistrationResponse.prototype.hasStatus = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interop.TestRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interop.TestRequest.repeatedFields_, null);
};
goog.inherits(proto.interop.TestRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.interop.TestRequest.displayName = 'proto.interop.TestRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interop.TestRequest.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.interop.TestRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.interop.TestRequest.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interop.TestRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.interop.TestRequest.toObject = function (includeInstance, msg) {
    var f, obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      name: jspb.Message.getFieldWithDefault(msg, 2, ''),
      serviceHopsList: jspb.Message.toObjectList(msg.getServiceHopsList(),
        proto.interop.ServiceHop.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interop.TestRequest}
 */
proto.interop.TestRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interop.TestRequest();
  return proto.interop.TestRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interop.TestRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interop.TestRequest}
 */
proto.interop.TestRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 3:
        var value = new proto.interop.ServiceHop();
        reader.readMessage(value, proto.interop.ServiceHop.deserializeBinaryFromReader);
        msg.addServiceHops(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interop.TestRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.interop.TestRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interop.TestRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interop.TestRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getServiceHopsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.interop.ServiceHop.serializeBinaryToWriter
    );
  }
};

/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.interop.TestRequest.prototype.getId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.interop.TestRequest.prototype.setId = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.interop.TestRequest.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.interop.TestRequest.prototype.setName = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * repeated ServiceHop service_hops = 3;
 * @return {!Array.<!proto.interop.ServiceHop>}
 */
proto.interop.TestRequest.prototype.getServiceHopsList = function () {
  return /** @type{!Array.<!proto.interop.ServiceHop>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interop.ServiceHop, 3));
};

/** @param {!Array.<!proto.interop.ServiceHop>} value */
proto.interop.TestRequest.prototype.setServiceHopsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.interop.ServiceHop=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interop.ServiceHop}
 */
proto.interop.TestRequest.prototype.addServiceHops = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.interop.ServiceHop, opt_index);
};

proto.interop.TestRequest.prototype.clearServiceHopsList = function () {
  this.setServiceHopsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interop.ServiceHop = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interop.ServiceHop.repeatedFields_, null);
};
goog.inherits(proto.interop.ServiceHop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.interop.ServiceHop.displayName = 'proto.interop.ServiceHop';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interop.ServiceHop.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.interop.ServiceHop.prototype.toObject = function (opt_includeInstance) {
    return proto.interop.ServiceHop.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interop.ServiceHop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.interop.ServiceHop.toObject = function (includeInstance, msg) {
    var f, obj = {
      service: (f = msg.getService()) && proto.interop.Service.toObject(includeInstance, f),
      tagsList: jspb.Message.toObjectList(msg.getTagsList(),
        proto.interop.Tag.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interop.ServiceHop}
 */
proto.interop.ServiceHop.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interop.ServiceHop();
  return proto.interop.ServiceHop.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interop.ServiceHop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interop.ServiceHop}
 */
proto.interop.ServiceHop.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.interop.Service();
        reader.readMessage(value, proto.interop.Service.deserializeBinaryFromReader);
        msg.setService(value);
        break;
      case 2:
        var value = new proto.interop.Tag();
        reader.readMessage(value, proto.interop.Tag.deserializeBinaryFromReader);
        msg.addTags(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interop.ServiceHop.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.interop.ServiceHop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interop.ServiceHop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interop.ServiceHop.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getService();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.interop.Service.serializeBinaryToWriter
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.interop.Tag.serializeBinaryToWriter
    );
  }
};

/**
 * optional Service service = 1;
 * @return {?proto.interop.Service}
 */
proto.interop.ServiceHop.prototype.getService = function () {
  return /** @type{?proto.interop.Service} */ (
    jspb.Message.getWrapperField(this, proto.interop.Service, 1));
};

/** @param {?proto.interop.Service|undefined} value */
proto.interop.ServiceHop.prototype.setService = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.interop.ServiceHop.prototype.clearService = function () {
  this.setService(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.interop.ServiceHop.prototype.hasService = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * repeated Tag tags = 2;
 * @return {!Array.<!proto.interop.Tag>}
 */
proto.interop.ServiceHop.prototype.getTagsList = function () {
  return /** @type{!Array.<!proto.interop.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interop.Tag, 2));
};

/** @param {!Array.<!proto.interop.Tag>} value */
proto.interop.ServiceHop.prototype.setTagsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.interop.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interop.Tag}
 */
proto.interop.ServiceHop.prototype.addTags = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.interop.Tag, opt_index);
};

proto.interop.ServiceHop.prototype.clearTagsList = function () {
  this.setTagsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interop.Tag = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interop.Tag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.interop.Tag.displayName = 'proto.interop.Tag';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.interop.Tag.prototype.toObject = function (opt_includeInstance) {
    return proto.interop.Tag.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interop.Tag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.interop.Tag.toObject = function (includeInstance, msg) {
    var f, obj = {
      key: jspb.Message.getFieldWithDefault(msg, 1, ''),
      value: jspb.Message.getFieldWithDefault(msg, 2, '')
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interop.Tag}
 */
proto.interop.Tag.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interop.Tag();
  return proto.interop.Tag.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interop.Tag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interop.Tag}
 */
proto.interop.Tag.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setKey(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setValue(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interop.Tag.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.interop.Tag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interop.Tag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interop.Tag.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};

/**
 * optional string key = 1;
 * @return {string}
 */
proto.interop.Tag.prototype.getKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.interop.Tag.prototype.setKey = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string value = 2;
 * @return {string}
 */
proto.interop.Tag.prototype.getValue = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.interop.Tag.prototype.setValue = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interop.TestResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interop.TestResponse.repeatedFields_, null);
};
goog.inherits(proto.interop.TestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.interop.TestResponse.displayName = 'proto.interop.TestResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interop.TestResponse.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.interop.TestResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.interop.TestResponse.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interop.TestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.interop.TestResponse.toObject = function (includeInstance, msg) {
    var f, obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      statusList: jspb.Message.toObjectList(msg.getStatusList(),
        proto.interop.CommonResponseStatus.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interop.TestResponse}
 */
proto.interop.TestResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interop.TestResponse();
  return proto.interop.TestResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interop.TestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interop.TestResponse}
 */
proto.interop.TestResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setId(value);
        break;
      case 2:
        var value = new proto.interop.CommonResponseStatus();
        reader.readMessage(value, proto.interop.CommonResponseStatus.deserializeBinaryFromReader);
        msg.addStatus(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interop.TestResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.interop.TestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interop.TestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interop.TestResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getStatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.interop.CommonResponseStatus.serializeBinaryToWriter
    );
  }
};

/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.interop.TestResponse.prototype.getId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.interop.TestResponse.prototype.setId = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated CommonResponseStatus status = 2;
 * @return {!Array.<!proto.interop.CommonResponseStatus>}
 */
proto.interop.TestResponse.prototype.getStatusList = function () {
  return /** @type{!Array.<!proto.interop.CommonResponseStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interop.CommonResponseStatus, 2));
};

/** @param {!Array.<!proto.interop.CommonResponseStatus>} value */
proto.interop.TestResponse.prototype.setStatusList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.interop.CommonResponseStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interop.CommonResponseStatus}
 */
proto.interop.TestResponse.prototype.addStatus = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.interop.CommonResponseStatus, opt_index);
};

proto.interop.TestResponse.prototype.clearStatusList = function () {
  this.setStatusList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interop.InteropRunRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interop.InteropRunRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.interop.InteropRunRequest.displayName = 'proto.interop.InteropRunRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.interop.InteropRunRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.interop.InteropRunRequest.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interop.InteropRunRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.interop.InteropRunRequest.toObject = function (includeInstance, msg) {
    var f, obj = {

    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interop.InteropRunRequest}
 */
proto.interop.InteropRunRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interop.InteropRunRequest();
  return proto.interop.InteropRunRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interop.InteropRunRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interop.InteropRunRequest}
 */
proto.interop.InteropRunRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interop.InteropRunRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.interop.InteropRunRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interop.InteropRunRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interop.InteropRunRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interop.InteropRunResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interop.InteropRunResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.interop.InteropRunResponse.displayName = 'proto.interop.InteropRunResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.interop.InteropRunResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.interop.InteropRunResponse.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interop.InteropRunResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.interop.InteropRunResponse.toObject = function (includeInstance, msg) {
    var f, obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interop.InteropRunResponse}
 */
proto.interop.InteropRunResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interop.InteropRunResponse();
  return proto.interop.InteropRunResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interop.InteropRunResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interop.InteropRunResponse}
 */
proto.interop.InteropRunResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interop.InteropRunResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.interop.InteropRunResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interop.InteropRunResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interop.InteropRunResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};

/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.interop.InteropRunResponse.prototype.getId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.interop.InteropRunResponse.prototype.setId = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interop.InteropResultRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.interop.InteropResultRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.interop.InteropResultRequest.displayName = 'proto.interop.InteropResultRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.interop.InteropResultRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.interop.InteropResultRequest.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interop.InteropResultRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.interop.InteropResultRequest.toObject = function (includeInstance, msg) {
    var f, obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interop.InteropResultRequest}
 */
proto.interop.InteropResultRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interop.InteropResultRequest();
  return proto.interop.InteropResultRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interop.InteropResultRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interop.InteropResultRequest}
 */
proto.interop.InteropResultRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interop.InteropResultRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.interop.InteropResultRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interop.InteropResultRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interop.InteropResultRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};

/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.interop.InteropResultRequest.prototype.getId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.interop.InteropResultRequest.prototype.setId = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interop.InteropResultResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interop.InteropResultResponse.repeatedFields_, null);
};
goog.inherits(proto.interop.InteropResultResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.interop.InteropResultResponse.displayName = 'proto.interop.InteropResultResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interop.InteropResultResponse.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.interop.InteropResultResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.interop.InteropResultResponse.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interop.InteropResultResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.interop.InteropResultResponse.toObject = function (includeInstance, msg) {
    var f, obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      status: (f = msg.getStatus()) && proto.interop.CommonResponseStatus.toObject(includeInstance, f),
      resultList: jspb.Message.toObjectList(msg.getResultList(),
        proto.interop.TestResult.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interop.InteropResultResponse}
 */
proto.interop.InteropResultResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interop.InteropResultResponse();
  return proto.interop.InteropResultResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interop.InteropResultResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interop.InteropResultResponse}
 */
proto.interop.InteropResultResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setId(value);
        break;
      case 2:
        var value = new proto.interop.CommonResponseStatus();
        reader.readMessage(value, proto.interop.CommonResponseStatus.deserializeBinaryFromReader);
        msg.setStatus(value);
        break;
      case 3:
        var value = new proto.interop.TestResult();
        reader.readMessage(value, proto.interop.TestResult.deserializeBinaryFromReader);
        msg.addResult(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interop.InteropResultResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.interop.InteropResultResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interop.InteropResultResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interop.InteropResultResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.interop.CommonResponseStatus.serializeBinaryToWriter
    );
  }
  f = message.getResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.interop.TestResult.serializeBinaryToWriter
    );
  }
};

/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.interop.InteropResultResponse.prototype.getId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.interop.InteropResultResponse.prototype.setId = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional CommonResponseStatus status = 2;
 * @return {?proto.interop.CommonResponseStatus}
 */
proto.interop.InteropResultResponse.prototype.getStatus = function () {
  return /** @type{?proto.interop.CommonResponseStatus} */ (
    jspb.Message.getWrapperField(this, proto.interop.CommonResponseStatus, 2));
};

/** @param {?proto.interop.CommonResponseStatus|undefined} value */
proto.interop.InteropResultResponse.prototype.setStatus = function (value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.interop.InteropResultResponse.prototype.clearStatus = function () {
  this.setStatus(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.interop.InteropResultResponse.prototype.hasStatus = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * repeated TestResult result = 3;
 * @return {!Array.<!proto.interop.TestResult>}
 */
proto.interop.InteropResultResponse.prototype.getResultList = function () {
  return /** @type{!Array.<!proto.interop.TestResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interop.TestResult, 3));
};

/** @param {!Array.<!proto.interop.TestResult>} value */
proto.interop.InteropResultResponse.prototype.setResultList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.interop.TestResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interop.TestResult}
 */
proto.interop.InteropResultResponse.prototype.addResult = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.interop.TestResult, opt_index);
};

proto.interop.InteropResultResponse.prototype.clearResultList = function () {
  this.setResultList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.interop.TestResult = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.interop.TestResult.repeatedFields_, null);
};
goog.inherits(proto.interop.TestResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.interop.TestResult.displayName = 'proto.interop.TestResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.interop.TestResult.repeatedFields_ = [4, 5];

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.interop.TestResult.prototype.toObject = function (opt_includeInstance) {
    return proto.interop.TestResult.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.interop.TestResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.interop.TestResult.toObject = function (includeInstance, msg) {
    var f, obj = {
      id: jspb.Message.getFieldWithDefault(msg, 1, 0),
      name: jspb.Message.getFieldWithDefault(msg, 2, ''),
      status: (f = msg.getStatus()) && proto.interop.CommonResponseStatus.toObject(includeInstance, f),
      serviceHopsList: jspb.Message.toObjectList(msg.getServiceHopsList(),
        proto.interop.ServiceHop.toObject, includeInstance),
      detailsList: jspb.Message.toObjectList(msg.getDetailsList(),
        proto.interop.CommonResponseStatus.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.interop.TestResult}
 */
proto.interop.TestResult.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.interop.TestResult();
  return proto.interop.TestResult.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.interop.TestResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.interop.TestResult}
 */
proto.interop.TestResult.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 3:
        var value = new proto.interop.CommonResponseStatus();
        reader.readMessage(value, proto.interop.CommonResponseStatus.deserializeBinaryFromReader);
        msg.setStatus(value);
        break;
      case 4:
        var value = new proto.interop.ServiceHop();
        reader.readMessage(value, proto.interop.ServiceHop.deserializeBinaryFromReader);
        msg.addServiceHops(value);
        break;
      case 5:
        var value = new proto.interop.CommonResponseStatus();
        reader.readMessage(value, proto.interop.CommonResponseStatus.deserializeBinaryFromReader);
        msg.addDetails(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.interop.TestResult.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.interop.TestResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.interop.TestResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.interop.TestResult.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.interop.CommonResponseStatus.serializeBinaryToWriter
    );
  }
  f = message.getServiceHopsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.interop.ServiceHop.serializeBinaryToWriter
    );
  }
  f = message.getDetailsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.interop.CommonResponseStatus.serializeBinaryToWriter
    );
  }
};

/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.interop.TestResult.prototype.getId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/** @param {number} value */
proto.interop.TestResult.prototype.setId = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.interop.TestResult.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.interop.TestResult.prototype.setName = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional CommonResponseStatus status = 3;
 * @return {?proto.interop.CommonResponseStatus}
 */
proto.interop.TestResult.prototype.getStatus = function () {
  return /** @type{?proto.interop.CommonResponseStatus} */ (
    jspb.Message.getWrapperField(this, proto.interop.CommonResponseStatus, 3));
};

/** @param {?proto.interop.CommonResponseStatus|undefined} value */
proto.interop.TestResult.prototype.setStatus = function (value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.interop.TestResult.prototype.clearStatus = function () {
  this.setStatus(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.interop.TestResult.prototype.hasStatus = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * repeated ServiceHop service_hops = 4;
 * @return {!Array.<!proto.interop.ServiceHop>}
 */
proto.interop.TestResult.prototype.getServiceHopsList = function () {
  return /** @type{!Array.<!proto.interop.ServiceHop>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interop.ServiceHop, 4));
};

/** @param {!Array.<!proto.interop.ServiceHop>} value */
proto.interop.TestResult.prototype.setServiceHopsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};

/**
 * @param {!proto.interop.ServiceHop=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interop.ServiceHop}
 */
proto.interop.TestResult.prototype.addServiceHops = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.interop.ServiceHop, opt_index);
};

proto.interop.TestResult.prototype.clearServiceHopsList = function () {
  this.setServiceHopsList([]);
};

/**
 * repeated CommonResponseStatus details = 5;
 * @return {!Array.<!proto.interop.CommonResponseStatus>}
 */
proto.interop.TestResult.prototype.getDetailsList = function () {
  return /** @type{!Array.<!proto.interop.CommonResponseStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.interop.CommonResponseStatus, 5));
};

/** @param {!Array.<!proto.interop.CommonResponseStatus>} value */
proto.interop.TestResult.prototype.setDetailsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};

/**
 * @param {!proto.interop.CommonResponseStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.interop.CommonResponseStatus}
 */
proto.interop.TestResult.prototype.addDetails = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.interop.CommonResponseStatus, opt_index);
};

proto.interop.TestResult.prototype.clearDetailsList = function () {
  this.setDetailsList([]);
};

/**
 * @enum {number}
 */
proto.interop.Status = {
  UNDEFINED: 0,
  SUCCESS: 1,
  FAILURE: 2,
  RUNNING: 3
};

/**
 * @enum {number}
 */
proto.interop.ServicePort = {
  INVALID_BASE_PORT: 0,
  JAVA_BASE_PORT: 10100,
  JAVA_GRPC_BINARY_PROPAGATION_PORT: 10101,
  JAVA_HTTP_B3_PROPAGATION_PORT: 10102,
  JAVA_HTTP_TRACECONTEXT_PROPAGATION_PORT: 10103,
  GO_BASE_PORT: 10200,
  GO_GRPC_BINARY_PROPAGATION_PORT: 10201,
  GO_HTTP_B3_PROPAGATION_PORT: 10202,
  GO_HTTP_TRACECONTEXT_PROPAGATION_PORT: 10203,
  NODEJS_BASE_PORT: 10300,
  NODEJS_GRPC_BINARY_PROPAGATION_PORT: 10301,
  NODEJS_HTTP_B3_PROPAGATION_PORT: 10302,
  NODEJS_HTTP_TRACECONTEXT_PROPAGATION_PORT: 10303,
  PYTHON_BASE_PORT: 10400,
  PYTHON_GRPC_BINARY_PROPAGATION_PORT: 10401,
  PYTHON_HTTP_B3_PROPAGATION_PORT: 10402,
  PYTHON_HTTP_TRACECONTEXT_PROPAGATION_PORT: 10403,
  CPP_BASE_PORT: 10500,
  CPP_GRPC_BINARY_PROPAGATION_PORT: 10501,
  CPP_HTTP_B3_PROPAGATION_PORT: 10502,
  CPP_HTTP_TRACECONTEXT_PROPAGATION_PORT: 10503
};

goog.object.extend(exports, proto.interop);

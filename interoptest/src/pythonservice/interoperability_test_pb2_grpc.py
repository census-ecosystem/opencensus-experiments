# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import interoperability_test_pb2 as interoperability__test__pb2


class TestExecutionServiceStub(object):
  """------Test Execution Service (Runs on all Server)---------
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.test = channel.unary_unary(
        '/interop.TestExecutionService/test',
        request_serializer=interoperability__test__pb2.TestRequest.SerializeToString,
        response_deserializer=interoperability__test__pb2.TestResponse.FromString,
        )


class TestExecutionServiceServicer(object):
  """------Test Execution Service (Runs on all Server)---------
  """

  def test(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TestExecutionServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'test': grpc.unary_unary_rpc_method_handler(
          servicer.test,
          request_deserializer=interoperability__test__pb2.TestRequest.FromString,
          response_serializer=interoperability__test__pb2.TestResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'interop.TestExecutionService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class RegistrationServiceStub(object):
  """------Registration Service (Runs on Test-Coordinator)-------
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.register = channel.unary_unary(
        '/interop.RegistrationService/register',
        request_serializer=interoperability__test__pb2.RegistrationRequest.SerializeToString,
        response_deserializer=interoperability__test__pb2.RegistrationResponse.FromString,
        )


class RegistrationServiceServicer(object):
  """------Registration Service (Runs on Test-Coordinator)-------
  """

  def register(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RegistrationServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'register': grpc.unary_unary_rpc_method_handler(
          servicer.register,
          request_deserializer=interoperability__test__pb2.RegistrationRequest.FromString,
          response_serializer=interoperability__test__pb2.RegistrationResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'interop.RegistrationService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class InteropTestServiceStub(object):
  """Interop Test Service
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.result = channel.unary_unary(
        '/interop.InteropTestService/result',
        request_serializer=interoperability__test__pb2.InteropResultRequest.SerializeToString,
        response_deserializer=interoperability__test__pb2.InteropResultResponse.FromString,
        )
    self.run = channel.unary_unary(
        '/interop.InteropTestService/run',
        request_serializer=interoperability__test__pb2.InteropRunRequest.SerializeToString,
        response_deserializer=interoperability__test__pb2.InteropRunResponse.FromString,
        )


class InteropTestServiceServicer(object):
  """Interop Test Service
  """

  def result(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def run(self, request, context):
    """Runs the test asynchronously.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InteropTestServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'result': grpc.unary_unary_rpc_method_handler(
          servicer.result,
          request_deserializer=interoperability__test__pb2.InteropResultRequest.FromString,
          response_serializer=interoperability__test__pb2.InteropResultResponse.SerializeToString,
      ),
      'run': grpc.unary_unary_rpc_method_handler(
          servicer.run,
          request_deserializer=interoperability__test__pb2.InteropRunRequest.FromString,
          response_serializer=interoperability__test__pb2.InteropRunResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'interop.InteropTestService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))

// Copyright 2018, OpenCensus Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.opencensus.interop";
option java_outer_classname = "RegistrationServiceProto";

package interop;

message RegistrationRequest {
  string server_name = 1; // name of the server (same as language) E.g. java, python, go
  repeated Service services = 2;
}

message Service {
  string name = 1; // name of the service. Eg java:http:tracecontext
  int32 port = 2;  // port on which the service is running.
  string host = 3; // host on which the service is running.
  Spec spec = 4;
}

message Spec {
  enum Transport {
    GRPC = 0;
    HTTP = 1;
  }
  enum Propagation {
    BINARY_FORMAT_PROPAGATION = 0;
    B3_FORMAT_PROPAGATION = 1;
    TRACE_CONTEXT_FORMAT_PROPAGATION = 2;
  }
  Transport transport = 1;
  Propagation propagation = 2;
}

enum Status {
  SUCCESS = 0;
  FAILURE = 1;
  RUNNING = 2;  // Used for asynchronous request status.
}

message CommonResponseStatus {
  Status status = 1;
  string error = 2;
}
message RegistrationResponse {
  CommonResponseStatus status = 1;
}

message TestRequest {
  int64 id = 1;
  string name = 2;
  repeated ServiceHop service_hops = 3;
}

message ServiceHop {
  Service service = 1;
  repeated Tag tags = 2;
}

message Tag {
  string key = 1;
  string value = 2;
}

message TestResponse {
  int64 id = 1;
  repeated CommonResponseStatus status = 2;
}

enum BasePort {
  INVALID_BASE_PORT = 0;
  JAVA_BASE_PORT = 10100;
  GO_BASE_PORT = 10200;
  NODEJS_BASE_PORT = 10300;
  PYTHON_BASE_PORT = 10400;
  CPP_BASE_PORT = 10500;
}

// ------Test Execution Service (Runs on all Server)---------
service TestExecutionService {
	rpc test(TestRequest) returns (TestResponse) {}
}


// ------Registration Service (Runs on Test-Coordinator)-------
service RegistrationService {
	rpc register(RegistrationRequest) returns (RegistrationResponse) {}
}


//------------------Interoperability Service  -------------

message InteropRunRequest {
  // Empty for now but can be enhanced to run subset of test.
}

message InteropRunResponse {
  int64 id = 1; // Returns test run id.
}

message InteropResultRequest {
  int64 id = 1;  // Id returned as response when test run was requested.
}

// Response containing all test cases.
message InteropResultResponse {
  int64 id = 1;
  CommonResponseStatus status = 2;
  repeated TestResult result = 3;
}

// Result for one test case.
message TestResult {
  int64 id = 1;
  string name = 2;
  CommonResponseStatus status = 3;
  repeated ServiceHop service_hops = 4;
  repeated CommonResponseStatus details = 5;
}

// Interop Test Service
service InteropTestService {
	rpc result(InteropResultRequest) returns (InteropResultResponse) {}

	// Runs the test asynchronously.
	rpc run(InteropRunRequest) returns (InteropRunResponse) {}
}

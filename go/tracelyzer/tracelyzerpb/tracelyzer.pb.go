// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tracelyzer.proto

package tracelyzerpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SubmitSpanRequest struct {
	Span *Span `protobuf:"bytes,1,opt,name=span" json:"span,omitempty"`
}

func (m *SubmitSpanRequest) Reset()                    { *m = SubmitSpanRequest{} }
func (m *SubmitSpanRequest) String() string            { return proto.CompactTextString(m) }
func (*SubmitSpanRequest) ProtoMessage()               {}
func (*SubmitSpanRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *SubmitSpanRequest) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

type SubmitSpanResponse struct {
}

func (m *SubmitSpanResponse) Reset()                    { *m = SubmitSpanResponse{} }
func (m *SubmitSpanResponse) String() string            { return proto.CompactTextString(m) }
func (*SubmitSpanResponse) ProtoMessage()               {}
func (*SubmitSpanResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*SubmitSpanRequest)(nil), "tracelyzerpb.SubmitSpanRequest")
	proto.RegisterType((*SubmitSpanResponse)(nil), "tracelyzerpb.SubmitSpanResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Tracelyzer service

type TracelyzerClient interface {
	SubmitSpan(ctx context.Context, opts ...grpc.CallOption) (Tracelyzer_SubmitSpanClient, error)
}

type tracelyzerClient struct {
	cc *grpc.ClientConn
}

func NewTracelyzerClient(cc *grpc.ClientConn) TracelyzerClient {
	return &tracelyzerClient{cc}
}

func (c *tracelyzerClient) SubmitSpan(ctx context.Context, opts ...grpc.CallOption) (Tracelyzer_SubmitSpanClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Tracelyzer_serviceDesc.Streams[0], c.cc, "/tracelyzerpb.Tracelyzer/SubmitSpan", opts...)
	if err != nil {
		return nil, err
	}
	x := &tracelyzerSubmitSpanClient{stream}
	return x, nil
}

type Tracelyzer_SubmitSpanClient interface {
	Send(*SubmitSpanRequest) error
	CloseAndRecv() (*SubmitSpanResponse, error)
	grpc.ClientStream
}

type tracelyzerSubmitSpanClient struct {
	grpc.ClientStream
}

func (x *tracelyzerSubmitSpanClient) Send(m *SubmitSpanRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tracelyzerSubmitSpanClient) CloseAndRecv() (*SubmitSpanResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SubmitSpanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Tracelyzer service

type TracelyzerServer interface {
	SubmitSpan(Tracelyzer_SubmitSpanServer) error
}

func RegisterTracelyzerServer(s *grpc.Server, srv TracelyzerServer) {
	s.RegisterService(&_Tracelyzer_serviceDesc, srv)
}

func _Tracelyzer_SubmitSpan_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TracelyzerServer).SubmitSpan(&tracelyzerSubmitSpanServer{stream})
}

type Tracelyzer_SubmitSpanServer interface {
	SendAndClose(*SubmitSpanResponse) error
	Recv() (*SubmitSpanRequest, error)
	grpc.ServerStream
}

type tracelyzerSubmitSpanServer struct {
	grpc.ServerStream
}

func (x *tracelyzerSubmitSpanServer) SendAndClose(m *SubmitSpanResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tracelyzerSubmitSpanServer) Recv() (*SubmitSpanRequest, error) {
	m := new(SubmitSpanRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Tracelyzer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tracelyzerpb.Tracelyzer",
	HandlerType: (*TracelyzerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubmitSpan",
			Handler:       _Tracelyzer_SubmitSpan_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "tracelyzer.proto",
}

func init() { proto.RegisterFile("tracelyzer.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x29, 0x4a, 0x4c,
	0x4e, 0xcd, 0xa9, 0xac, 0x4a, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x41, 0x88,
	0x14, 0x24, 0x49, 0x71, 0x83, 0x79, 0x10, 0x29, 0x25, 0x6b, 0x2e, 0xc1, 0xe0, 0xd2, 0xa4, 0xdc,
	0xcc, 0x92, 0xe0, 0x82, 0xc4, 0xbc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x35, 0x2e,
	0x96, 0xe2, 0x82, 0xc4, 0x3c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x21, 0x3d, 0x64, 0xed,
	0x7a, 0x60, 0x85, 0x60, 0x79, 0x25, 0x11, 0x2e, 0x21, 0x64, 0xcd, 0xc5, 0x05, 0xf9, 0x79, 0xc5,
	0xa9, 0x46, 0xf1, 0x5c, 0x5c, 0x21, 0x70, 0x0d, 0x42, 0x81, 0x5c, 0x5c, 0x08, 0x35, 0x42, 0xf2,
	0x68, 0x66, 0xa1, 0x5b, 0x2d, 0xa5, 0x80, 0x5b, 0x01, 0xc4, 0x78, 0x0d, 0xc6, 0x24, 0x36, 0xb0,
	0xd3, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x00, 0xfe, 0xba, 0xe9, 0x00, 0x00, 0x00,
}

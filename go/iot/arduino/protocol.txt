To run the service, the arduino should firstly send the request for registration to the Pi and keep sending requests for
sending sensor data after it receives the response for agreement. If it doesn't receive the positive response but still
sends request for sending sensor data, it would receive negative response anyway.

Every time after the arduino sends a request to the Raspberry Pi, it should wait for the response from the Pi. Temporarily
it would block forever if it doesn't receive any response. Maybe would use exponential backoff in the future.

Every request or response is ended with a newline character '\n'.

Temporarily the packet is encapsulated based on the JSON format. It's capital sensitive. The format is as below.

Typical example for Registration request would be as below:
{
    "ArgumentType" : 0
	"ProjectId" : "project-id"
	"View" : {
		"Name" : "my.org/views/protocol_test"
		"Description" : "View for Protocol Test"
	}
	"Aggregation" : {
		"AggregationType" : "LastValue" or "Sum" or "Count"
		"AggregationValue" : []
	}
	"Measure":{
		"Name" : "my.org/measure/Measure_Test"
		"Descrption" : "Measure Test"
		"Unit" : "1" or "By" or "ms"
		"MeasureType": "int64" or "float64"
	}
	"TagKeys": ["DeviceId", "DeviceId"]
	"ReportPeriod" : 1

}

Note that you should add a unique id for your arduino for tag keys.

Typical example for sending data request would be as below:
{
    "ArgumentType" : 1
	"Measure":{
	    "DeviceId": "arduino-1"
		"Name": "my.org/measure/Measure_Test"
		"MeasureType": "int64" or "float64"
		"MeasureValue": "1"
	}
	"TagKeys": ["DeviceId", "Date"]
	"TagValues": ["Arduino-1", "2017-01-05"]
}

Note that you should add a unique id for your arduino for tag.

Typical example for the response from Raspberry Pi would be as below:
{
	"Code": 200 (OK) or 404 (Fail)
	"Info": "Registration Successfully!"
}